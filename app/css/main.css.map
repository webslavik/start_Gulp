{"version":3,"sources":["main.css","modules/_basic-elements.scss","_variables.sass","modules/_svg-sprite.scss","modules/_png-sprite.scss","modules/_grid.scss","../bower_components/susy/sass/susy/output/support/_rem.scss","../bower_components/susy/sass/susy/language/susy/_container.scss","../bower_components/susy/sass/susy/output/support/_clearfix.scss","modules/_buttons.scss","sections/_footer.scss","pages/_start.scss","../bower_components/bourbon/app/assets/stylesheets/functions/_px-to-rem.scss","../bower_components/breakpoint-sass/stylesheets/_breakpoint.scss","../bower_components/susy/sass/susy/language/susy/_span.scss","../bower_components/susy/sass/susy/output/shared/_direction.scss","../bower_components/susy/sass/susy/language/susy/_gutters.scss"],"names":[],"mappings":"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","file":"main.css","sourcesContent":["@charset \"UTF-8\";\n* {\n  box-sizing: border-box; }\n\nbody {\n  min-width: 320px;\n  position: relative;\n  line-height: 1.5;\n  font-family: \"OpenSansRegular\", sans-serif;\n  background-color: #fff;\n  color: #000;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-size-adjust: 100%; }\n\nimg {\n  max-width: 100%; }\n\nh1, h2, h3, h4, h5, h6 {\n  margin: 0; }\n\n/* \r\n\t-------------------------------------------\r\n\tsvg спрайт\r\n\t-------------------------------------------\r\n*/\n.icon {\n  display: inline-block;\n  width: 1em;\n  height: 1em;\n  fill: currentColor; }\n\n.icon-brainstorm {\n  font-size: 29.6429rem;\n  width: 1em; }\n\n.icon-face {\n  font-size: 2.4rem;\n  width: 1.20833em; }\n\n.icon-gamepad {\n  font-size: 30rem;\n  width: 1em; }\n\n.icon-placeholder {\n  font-size: 29.9997rem;\n  width: 1em; }\n\n.icon-smartphone {\n  font-size: 3.5rem;\n  width: 1em; }\n\n.icon-youtube-4 {\n  font-size: 2.4rem;\n  width: 1em; }\n\n/*\r\nSCSS variables are information about icon's compiled state, stored under its original file name\r\n\r\n.icon-home {\r\n  width: $icon-home-width;\r\n}\r\n\r\nThe large array-like variables contain all information about a single icon\r\n$icon-home: x y offset_x offset_y width height total_width total_height image_path;\r\n\r\nAt the bottom of this section, we provide information about the spritesheet itself\r\n$spritesheet: width height image $spritesheet-sprites;\r\n*/\n/*\r\nThe provided mixins are intended to be used with the array-like variables\r\n\r\n.icon-home {\r\n  @include sprite-width($icon-home);\r\n}\r\n\r\n.icon-email {\r\n  @include sprite($icon-email);\r\n}\r\n\r\nExample usage in HTML:\r\n\r\n`display: block` sprite:\r\n<div class=\"icon-home\"></div>\r\n\r\nTo change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:\r\n\r\n// CSS\r\n.icon {\r\n  display: inline-block;\r\n}\r\n\r\n// HTML\r\n<i class=\"icon icon-home\"></i>\r\n*/\n/*\r\nThe `sprites` mixin generates identical output to the CSS template\r\n  but can be overridden inside of SCSS\r\n\r\n@include sprites($spritesheet-sprites);\r\n*/\n/* \r\n\t-------------------------------------------\r\n\tGRID\r\n\t-------------------------------------------\r\n*/\n.container {\n  max-width: 1170px;\n  margin-left: auto;\n  margin-right: auto; }\n  .container:after {\n    content: \" \";\n    display: block;\n    clear: both; }\n\n/* \r\n\t-------------------------------------------\r\n\tBUTTONS\r\n\t-------------------------------------------\r\n*/\n/* \r\n\t-----------------------------------------------\r\n\tFOOTER\r\n\t-----------------------------------------------\r\n*/\n.footer {\n  background-color: lightcoral; }\n\n.page-title {\n  margin-bottom: 50px;\n  text-align: center; }\n\n.svg-sprites-section {\n  margin-bottom: 80px;\n  text-align: center; }\n\n/* Стили для SVG  иконок */\n.icon {\n  margin: 0 20px; }\n\n.icon-face {\n  font-size: 2rem;\n  width: 1.20833em; }\n  .icon-face.face-mod {\n    fill: grey; }\n\n.icon-smartphone {\n  font-size: 3rem;\n  width: 1em; }\n  .icon-smartphone.smartphone-mod {\n    fill: purple; }\n\n.icon-youtube-4 {\n  font-size: 3.625rem;\n  width: 1em; }\n  .icon-youtube-4.youtube4-mod {\n    fill: tomato;\n    transition: all 180ms ease-in-out; }\n    .icon-youtube-4.youtube4-mod:hover, .icon-youtube-4.youtube4-mod:active {\n      fill: red; }\n\n.icon-gamepad {\n  font-size: 7.5rem;\n  width: 1em; }\n  .icon-gamepad.gamepad-mod {\n    color: lightblue;\n    transition: all 180ms ease-in-out; }\n    .icon-gamepad.gamepad-mod:hover, .icon-gamepad.gamepad-mod:active {\n      color: grey; }\n\n.icon-placeholder {\n  font-size: 8.75rem;\n  width: 1em; }\n\n.icon-brainstorm {\n  font-size: 12.5rem;\n  width: 1em; }\n  .icon-brainstorm.brainstorm-mod {\n    color: red;\n    transition: all 180ms ease-in-out; }\n    .icon-brainstorm.brainstorm-mod:hover, .icon-brainstorm.brainstorm-mod:active {\n      color: purple; }\n\n/* Стили для PNG  иконок */\n.png-sprites-section {\n  margin-bottom: 80px;\n  text-align: center; }\n\n.icon-png {\n  display: inline-block;\n  margin: 0 10px;\n  vertical-align: middle; }\n  .icon-png__flashlight {\n    background-image: url(../img/png-sprite.png);\n    background-position: 0px -98px;\n    width: 64px;\n    height: 64px; }\n    .icon-png__flashlight:hover, .icon-png__flashlight:focus {\n      background-image: url(../img/png-sprite.png);\n      background-position: -98px 0px;\n      width: 64px;\n      height: 64px; }\n  .icon-png__instagram {\n    background-image: url(../img/png-sprite.png);\n    background-position: -164px 0px;\n    width: 48px;\n    height: 48px; }\n    .icon-png__instagram:hover, .icon-png__instagram:focus {\n      background-image: url(../img/png-sprite.png);\n      background-position: -66px -98px;\n      width: 48px;\n      height: 48px; }\n  .icon-png__weather {\n    background-image: url(../img/png-sprite.png);\n    background-position: -164px -50px;\n    width: 48px;\n    height: 48px; }\n  .icon-png__whatsapp {\n    background-image: url(../img/png-sprite.png);\n    background-position: 0px -164px;\n    width: 48px;\n    height: 48px; }\n    .icon-png__whatsapp:hover, .icon-png__whatsapp:focus {\n      background-image: url(../img/png-sprite.png);\n      background-position: -164px -100px;\n      width: 48px;\n      height: 48px; }\n\n@media (max-width: 639px) {\n  body {\n    background-color: green; } }\n\n.block-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  background-color: #3498db; }\n  .block-list li {\n    width: 23.61111%;\n    float: left;\n    margin-left: 0.69444%;\n    margin-right: 0.69444%;\n    background-color: #1abc9c;\n    margin-bottom: 20px; }\n  @media (min-width: 1024px) and (max-width: 1200px) {\n    .block-list li {\n      width: 31.94444%;\n      float: left;\n      margin-left: 0.69444%;\n      margin-right: 0.69444%;\n      background-color: #f39c12; } }\n  @media (min-width: 640px) and (max-width: 1024px) {\n    .block-list li {\n      width: 48.61111%;\n      float: left;\n      margin-left: 0.69444%;\n      margin-right: 0.69444%;\n      background-color: #e74c3c; } }\n  @media (max-width: 639px) {\n    .block-list li {\n      width: 98.61111%;\n      float: left;\n      margin-left: 0.69444%;\n      margin-right: 0.69444%;\n      background-color: #8e44ad; } }\n","\r\n* {\r\n  box-sizing: border-box\r\n}\r\n\r\n\r\nbody {\r\n  min-width: 320px;\r\n  position: relative;\r\n  line-height: 1.5;\r\n  font-family: $main-font;\r\n  background-color: #fff;\r\n  color: #000;\r\n  -webkit-font-smoothing: antialiased;\r\n  -webkit-text-size-adjust: 100%;\r\n}\r\n\r\nimg {\r\n  max-width: 100%;\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n  margin: 0;\r\n}\r\n\r\n","//\n// Some Useful color Vars via http://clrs.cc/\n//\n\n\n$main-font: 'OpenSansRegular', sans-serif;\n$font-italic: 'firasans-italic', sans-serif;\n$font-extraBoldItalic: 'firasans-extrabolditalic', sans-serif;\n$font-helvetica: 'helveticaneuecyr-roman', sans-serif;\n","/* \r\n\t-------------------------------------------\r\n\tsvg спрайт\r\n\t-------------------------------------------\r\n*/\r\n.icon {\r\n\tdisplay: inline-block;\r\n\twidth: 1em;\r\n\theight: 1em;\r\n\tfill: currentColor;\r\n}\r\n\r\n.icon-brainstorm {\r\n\tfont-size:(296.429/10)*1rem;\r\n\twidth:(296.429/296.429)*1em;\r\n}\r\n.icon-face {\r\n\tfont-size:(24/10)*1rem;\r\n\twidth:(29/24)*1em;\r\n}\r\n.icon-gamepad {\r\n\tfont-size:(300/10)*1rem;\r\n\twidth:(300/300)*1em;\r\n}\r\n.icon-placeholder {\r\n\tfont-size:(299.997/10)*1rem;\r\n\twidth:(299.997/299.997)*1em;\r\n}\r\n.icon-smartphone {\r\n\tfont-size:(35/10)*1rem;\r\n\twidth:(35/35)*1em;\r\n}\r\n.icon-youtube-4 {\r\n\tfont-size:(24/10)*1rem;\r\n\twidth:(24/24)*1em;\r\n}\r\n","/*\r\nSCSS variables are information about icon's compiled state, stored under its original file name\r\n\r\n.icon-home {\r\n  width: $icon-home-width;\r\n}\r\n\r\nThe large array-like variables contain all information about a single icon\r\n$icon-home: x y offset_x offset_y width height total_width total_height image_path;\r\n\r\nAt the bottom of this section, we provide information about the spritesheet itself\r\n$spritesheet: width height image $spritesheet-sprites;\r\n*/\r\n$icon-amazon-name: 'icon-amazon';\r\n$icon-amazon-x: 0px;\r\n$icon-amazon-y: 0px;\r\n$icon-amazon-offset-x: 0px;\r\n$icon-amazon-offset-y: 0px;\r\n$icon-amazon-width: 96px;\r\n$icon-amazon-height: 96px;\r\n$icon-amazon-total-width: 212px;\r\n$icon-amazon-total-height: 212px;\r\n$icon-amazon-image: '../img/png-sprite.png';\r\n$icon-amazon: (0px, 0px, 0px, 0px, 96px, 96px, 212px, 212px, '../img/png-sprite.png', 'icon-amazon', );\r\n$icon-flashlight-mod-name: 'icon-flashlight-mod';\r\n$icon-flashlight-mod-x: 98px;\r\n$icon-flashlight-mod-y: 0px;\r\n$icon-flashlight-mod-offset-x: -98px;\r\n$icon-flashlight-mod-offset-y: 0px;\r\n$icon-flashlight-mod-width: 64px;\r\n$icon-flashlight-mod-height: 64px;\r\n$icon-flashlight-mod-total-width: 212px;\r\n$icon-flashlight-mod-total-height: 212px;\r\n$icon-flashlight-mod-image: '../img/png-sprite.png';\r\n$icon-flashlight-mod: (98px, 0px, -98px, 0px, 64px, 64px, 212px, 212px, '../img/png-sprite.png', 'icon-flashlight-mod', );\r\n$icon-flashlight-name: 'icon-flashlight';\r\n$icon-flashlight-x: 0px;\r\n$icon-flashlight-y: 98px;\r\n$icon-flashlight-offset-x: 0px;\r\n$icon-flashlight-offset-y: -98px;\r\n$icon-flashlight-width: 64px;\r\n$icon-flashlight-height: 64px;\r\n$icon-flashlight-total-width: 212px;\r\n$icon-flashlight-total-height: 212px;\r\n$icon-flashlight-image: '../img/png-sprite.png';\r\n$icon-flashlight: (0px, 98px, 0px, -98px, 64px, 64px, 212px, 212px, '../img/png-sprite.png', 'icon-flashlight', );\r\n$icon-instagram-mod-name: 'icon-instagram-mod';\r\n$icon-instagram-mod-x: 66px;\r\n$icon-instagram-mod-y: 98px;\r\n$icon-instagram-mod-offset-x: -66px;\r\n$icon-instagram-mod-offset-y: -98px;\r\n$icon-instagram-mod-width: 48px;\r\n$icon-instagram-mod-height: 48px;\r\n$icon-instagram-mod-total-width: 212px;\r\n$icon-instagram-mod-total-height: 212px;\r\n$icon-instagram-mod-image: '../img/png-sprite.png';\r\n$icon-instagram-mod: (66px, 98px, -66px, -98px, 48px, 48px, 212px, 212px, '../img/png-sprite.png', 'icon-instagram-mod', );\r\n$icon-instagram-name: 'icon-instagram';\r\n$icon-instagram-x: 164px;\r\n$icon-instagram-y: 0px;\r\n$icon-instagram-offset-x: -164px;\r\n$icon-instagram-offset-y: 0px;\r\n$icon-instagram-width: 48px;\r\n$icon-instagram-height: 48px;\r\n$icon-instagram-total-width: 212px;\r\n$icon-instagram-total-height: 212px;\r\n$icon-instagram-image: '../img/png-sprite.png';\r\n$icon-instagram: (164px, 0px, -164px, 0px, 48px, 48px, 212px, 212px, '../img/png-sprite.png', 'icon-instagram', );\r\n$icon-weather-name: 'icon-weather';\r\n$icon-weather-x: 164px;\r\n$icon-weather-y: 50px;\r\n$icon-weather-offset-x: -164px;\r\n$icon-weather-offset-y: -50px;\r\n$icon-weather-width: 48px;\r\n$icon-weather-height: 48px;\r\n$icon-weather-total-width: 212px;\r\n$icon-weather-total-height: 212px;\r\n$icon-weather-image: '../img/png-sprite.png';\r\n$icon-weather: (164px, 50px, -164px, -50px, 48px, 48px, 212px, 212px, '../img/png-sprite.png', 'icon-weather', );\r\n$icon-whatsapp-mod-name: 'icon-whatsapp-mod';\r\n$icon-whatsapp-mod-x: 164px;\r\n$icon-whatsapp-mod-y: 100px;\r\n$icon-whatsapp-mod-offset-x: -164px;\r\n$icon-whatsapp-mod-offset-y: -100px;\r\n$icon-whatsapp-mod-width: 48px;\r\n$icon-whatsapp-mod-height: 48px;\r\n$icon-whatsapp-mod-total-width: 212px;\r\n$icon-whatsapp-mod-total-height: 212px;\r\n$icon-whatsapp-mod-image: '../img/png-sprite.png';\r\n$icon-whatsapp-mod: (164px, 100px, -164px, -100px, 48px, 48px, 212px, 212px, '../img/png-sprite.png', 'icon-whatsapp-mod', );\r\n$icon-whatsapp-name: 'icon-whatsapp';\r\n$icon-whatsapp-x: 0px;\r\n$icon-whatsapp-y: 164px;\r\n$icon-whatsapp-offset-x: 0px;\r\n$icon-whatsapp-offset-y: -164px;\r\n$icon-whatsapp-width: 48px;\r\n$icon-whatsapp-height: 48px;\r\n$icon-whatsapp-total-width: 212px;\r\n$icon-whatsapp-total-height: 212px;\r\n$icon-whatsapp-image: '../img/png-sprite.png';\r\n$icon-whatsapp: (0px, 164px, 0px, -164px, 48px, 48px, 212px, 212px, '../img/png-sprite.png', 'icon-whatsapp', );\r\n$spritesheet-width: 212px;\r\n$spritesheet-height: 212px;\r\n$spritesheet-image: '../img/png-sprite.png';\r\n$spritesheet-sprites: ($icon-amazon, $icon-flashlight-mod, $icon-flashlight, $icon-instagram-mod, $icon-instagram, $icon-weather, $icon-whatsapp-mod, $icon-whatsapp, );\r\n$spritesheet: (212px, 212px, '../img/png-sprite.png', $spritesheet-sprites, );\r\n\r\n/*\r\nThe provided mixins are intended to be used with the array-like variables\r\n\r\n.icon-home {\r\n  @include sprite-width($icon-home);\r\n}\r\n\r\n.icon-email {\r\n  @include sprite($icon-email);\r\n}\r\n\r\nExample usage in HTML:\r\n\r\n`display: block` sprite:\r\n<div class=\"icon-home\"></div>\r\n\r\nTo change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:\r\n\r\n// CSS\r\n.icon {\r\n  display: inline-block;\r\n}\r\n\r\n// HTML\r\n<i class=\"icon icon-home\"></i>\r\n*/\r\n@mixin sprite-width($sprite) {\r\n  width: nth($sprite, 5);\r\n}\r\n\r\n@mixin sprite-height($sprite) {\r\n  height: nth($sprite, 6);\r\n}\r\n\r\n@mixin sprite-position($sprite) {\r\n  $sprite-offset-x: nth($sprite, 3);\r\n  $sprite-offset-y: nth($sprite, 4);\r\n  background-position: $sprite-offset-x  $sprite-offset-y;\r\n}\r\n\r\n@mixin sprite-image($sprite) {\r\n  $sprite-image: nth($sprite, 9);\r\n  background-image: url(#{$sprite-image});\r\n}\r\n\r\n@mixin sprite($sprite) {\r\n  @include sprite-image($sprite);\r\n  @include sprite-position($sprite);\r\n  @include sprite-width($sprite);\r\n  @include sprite-height($sprite);\r\n}\r\n\r\n/*\r\nThe `sprites` mixin generates identical output to the CSS template\r\n  but can be overridden inside of SCSS\r\n\r\n@include sprites($spritesheet-sprites);\r\n*/\r\n@mixin sprites($sprites) {\r\n  @each $sprite in $sprites {\r\n    $sprite-name: nth($sprite, 10);\r\n    .#{$sprite-name} {\r\n      @include sprite($sprite);\r\n    }\r\n  }\r\n}\r\n","/* \r\n\t-------------------------------------------\r\n\tGRID\r\n\t-------------------------------------------\r\n*/\r\n\r\n// Настройки Susy\r\n$susy: (\r\n  columns: 12,\r\n  gutters: 1/5,\r\n  math: fluid,\r\n  output: float,\r\n  gutter-position: split\r\n);\r\n\r\n\r\n\r\n// примеры Breakpoint\r\n$wide: 1200px;\r\n$desktop: 1024px 1200px;\r\n$tablet: 640px 1024px;\r\n$mobile: max-width 639px;\r\n$landscape: (max-height 600px) (orientation portrait);\r\n$hidpi: min-resolution 1.5dppx;\r\n\r\n\r\n//-----------------------------------------------------------\r\n\r\n\r\n.container {\r\n\t// background-color: tomato;\r\n\t@include container(1170px);\r\n}","// rem Support\r\n// ===========\r\n\r\n// rem\r\n// ---\r\n// Check for an existing support mixin, or output directly.\r\n// - $prop  : <css property>\r\n// - $val   : <css value>\r\n@mixin susy-rem(\r\n  $prop,\r\n  $val\r\n) {\r\n  $_reqs: (\r\n    variable: rhythm-unit rem-with-px-fallback,\r\n    mixin: rem,\r\n  );\r\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\r\n    @include rem($prop, $val);\r\n  } @else {\r\n    #{$prop}: $val;\r\n  }\r\n}\r\n","// Container Syntax\r\n// ================\r\n\r\n// Container [mixin]\r\n// -----------------\r\n// Set a container element\r\n// - [$layout]  : <settings>\r\n@mixin container(\r\n  $layout: $susy\r\n) {\r\n  $inspect    : $layout;\r\n  $layout     : parse-grid($layout);\r\n\r\n  $_width     : get-container-width($layout);\r\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\r\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\r\n\r\n  $_box       : susy-get(box-sizing, $layout);\r\n\r\n  @if $_box {\r\n    @include output((box-sizing: $_box));\r\n  }\r\n\r\n  @include susy-inspect(container, $inspect);\r\n  @include float-container($_width, $_justify, $_property);\r\n  @include show-grid($layout);\r\n}\r\n\r\n// Container [function]\r\n// --------------------\r\n// Return container width\r\n// - [$layout]  : <settings>\r\n@function container(\r\n  $layout: $susy\r\n) {\r\n  $layout: parse-grid($layout);\r\n  @return get-container-width($layout);\r\n}\r\n\r\n// Get Container Width\r\n// -------------------\r\n// Calculate the container width\r\n// - [$layout]: <settings>\r\n@function get-container-width(\r\n  $layout: $susy\r\n) {\r\n  $layout         : parse-grid($layout);\r\n  $_width         : susy-get(container, $layout);\r\n  $_column-width  : susy-get(column-width, $layout);\r\n  $_math          : susy-get(math, $layout);\r\n\r\n  @if not($_width) or $_width == auto {\r\n    @if valid-column-math($_math, $_column-width) {\r\n      $_columns   : susy-get(columns, $layout);\r\n      $_gutters   : susy-get(gutters, $layout);\r\n      $_spread    : if(is-split($layout), wide, narrow);\r\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\r\n    } @else {\r\n      $_width: 100%;\r\n    }\r\n  }\r\n\r\n  @return $_width;\r\n}\r\n\r\n// Parse Container Position\r\n// ------------------------\r\n// Parse the $container-position into margin values.\r\n// - [$justify]   : left | center | right | <length> [<length>]\r\n@function parse-container-position(\r\n  $justify: map-get($susy-defaults, container-position)\r\n) {\r\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\r\n\r\n  @if not(index(left right center, $justify)) {\r\n    $_return: nth($justify, 1);\r\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\r\n  }\r\n\r\n  @return $_return;\r\n}\r\n","// Susy Fallback Clearfix\r\n// ======================\r\n\r\n\r\n// Clearfix\r\n// --------\r\n// Check for an existing support mixin, or provide a simple fallback.\r\n@mixin susy-clearfix {\r\n  @if susy-support(clearfix, (mixin: clearfix)) {\r\n    @include clearfix;\r\n  } @else {\r\n    &:after {\r\n      content: \" \";\r\n      display: block;\r\n      clear: both;\r\n    }\r\n  }\r\n}\r\n","/* \r\n\t-------------------------------------------\r\n\tBUTTONS\r\n\t-------------------------------------------\r\n*/","/* \r\n\t-----------------------------------------------\r\n\tFOOTER\r\n\t-----------------------------------------------\r\n*/\r\n.footer {\r\n\tbackground-color: lightcoral;\r\n}",".page-wrap {\r\n\t\r\n}\r\n\r\n\r\n.page-title {\r\n\tmargin-bottom: 50px;\r\n\ttext-align: center;\r\n}\r\n\r\n\r\n.svg-sprites-section{\r\n  margin-bottom: 80px;\r\n\ttext-align: center;\r\n}\r\n\r\n/* Стили для SVG  иконок */\r\n.icon {\r\n\tmargin: 0 20px;\r\n}\r\n\r\n.icon-face {\r\n  font-size: rem(32);\r\n  width: 1.20833em; \r\n\r\n  &.face-mod {\r\n  \tfill: grey;\r\n  }\r\n\r\n}\r\n\r\n.icon-smartphone {\r\n  font-size: rem(48);\r\n  width: 1em; \r\n\r\n  &.smartphone-mod {\r\n  \tfill: purple;\r\n  }\r\n\r\n}\r\n\r\n.icon-youtube-4 {\r\n  font-size: rem(58);\r\n  width: 1em;\r\n\r\n  &.youtube4-mod {\r\n  \tfill: tomato;\r\n  \ttransition: all 180ms ease-in-out;\r\n\r\n  \t&:hover,\r\n\t  &:active {\r\n\t  \tfill: red;\r\n\t  }\r\n  }\r\n\r\n}\r\n\r\n.icon-gamepad {\r\n  font-size: rem(120);\r\n  width: 1em; \r\n\r\n   &.gamepad-mod {\r\n  \tcolor: lightblue;\r\n  \ttransition: all 180ms ease-in-out;\r\n\r\n  \t&:hover,\r\n\t  &:active {\r\n\t \t\tcolor: grey;\r\n\t  }\r\n  }\r\n\r\n}\r\n\r\n\r\n.icon-placeholder {\r\n  font-size: rem(140);\r\n  width: 1em; \r\n}\r\n\r\n\r\n.icon-brainstorm {\r\n  font-size: rem(200);\r\n  width: 1em; \r\n\r\n\r\n\t&.brainstorm-mod {\r\n\t\tcolor: red;\r\n\t\ttransition: all 180ms ease-in-out;\r\n\r\n\t\t&:hover,\r\n\t  &:active {\r\n\t  \tcolor: purple;\r\n\t  }\r\n\t}\r\n}\r\n\r\n\r\n\r\n/* Стили для PNG  иконок */\r\n.png-sprites-section {\r\n  margin-bottom: 80px;\r\n  text-align: center;\r\n}\r\n\r\n\r\n.icon-png {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n  vertical-align: middle;\r\n\r\n  &__flashlight {\r\n    @include sprite($icon-flashlight);\r\n\r\n    &:hover,\r\n    &:focus {\r\n      @include sprite($icon-flashlight-mod);\r\n    }\r\n  }\r\n\r\n  &__instagram {\r\n    @include sprite($icon-instagram);\r\n\r\n    &:hover,\r\n    &:focus {\r\n      @include sprite($icon-instagram-mod);\r\n    }\r\n  }\r\n\r\n  &__weather {\r\n    @include sprite($icon-weather);\r\n  }\r\n\r\n  &__whatsapp {\r\n    @include sprite($icon-whatsapp);\r\n\r\n    &:hover,\r\n    &:focus {\r\n      @include sprite($icon-whatsapp-mod);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n@include breakpoint(max-width 639px) {\r\n  body {\r\n    background-color: green;\r\n  }\r\n}\r\n\r\n\r\n.block-list {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n\r\n  background-color: #3498db;\r\n\r\n  li {\r\n    @include span(3);\r\n    background-color: #1abc9c;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  @include breakpoint($desktop) {\r\n    li {\r\n      @include span(4);\r\n      background-color: #f39c12;\r\n    }\r\n  }\r\n\r\n  @include breakpoint($tablet) {\r\n    li {\r\n      @include span(6);\r\n      background-color: #e74c3c;\r\n    }\r\n  }\r\n\r\n  @include breakpoint($mobile) {\r\n    li {\r\n      @include span(12);\r\n      background-color: #8e44ad;\r\n    }\r\n  }\r\n}","// Convert pixels to rems\r\n// eg. for a relational value of 12px write rem(12)\r\n// Assumes $em-base is the font-size of <html>\r\n\r\n@function rem($pxval) {\r\n  @if not unitless($pxval) {\r\n    $pxval: strip-units($pxval);\r\n  }\r\n\r\n  $base: $em-base;\r\n  @if not unitless($base) {\r\n    $base: strip-units($base);\r\n  }\r\n  @return ($pxval / $base) * 1rem;\r\n}\r\n","//////////////////////////////\r\n// Default Variables\r\n//////////////////////////////\r\n$Breakpoint-Settings: (\r\n  'default media': all,\r\n  'default feature': min-width,\r\n  'default pair': width,\r\n\r\n  'force all media type': false,\r\n  'to ems': false,\r\n  'transform resolutions': true,\r\n\r\n  'no queries': false,\r\n  'no query fallbacks': false,\r\n\r\n  'base font size': 16px,\r\n\r\n  'legacy syntax': false\r\n);\r\n\r\n$breakpoint: () !default;\r\n\r\n//////////////////////////////\r\n// Imports\r\n//////////////////////////////\r\n@import \"breakpoint/settings\";\r\n@import 'breakpoint/context';\r\n@import 'breakpoint/helpers';\r\n@import 'breakpoint/parsers';\r\n@import 'breakpoint/no-query';\r\n\r\n@import 'breakpoint/respond-to';\r\n\r\n@import \"breakpoint/legacy-settings\";\r\n\r\n//////////////////////////////\r\n// Breakpoint Mixin\r\n//////////////////////////////\r\n\r\n@mixin breakpoint($query, $no-query: false) {\r\n  @include legacy-settings-warning;\r\n\r\n  // Reset contexts\r\n  @include private-breakpoint-reset-contexts();\r\n\r\n  $breakpoint: breakpoint($query, false);\r\n\r\n  $query-string: map-get($breakpoint, 'query');\r\n  $query-fallback: map-get($breakpoint, 'fallback');\r\n\r\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\r\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\r\n\r\n  // Allow for an as-needed override or usage of no query fallback.\r\n  @if $no-query != false {\r\n    $query-fallback: $no-query;\r\n  }\r\n\r\n  @if $query-fallback != false {\r\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\r\n  }\r\n\r\n  // Print Out Query String\r\n  @if not breakpoint-get('no queries') {\r\n    @media #{$query-string} {\r\n      @content;\r\n    }\r\n  }\r\n\r\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\r\n\r\n    $type: type-of(breakpoint-get('no query fallbacks'));\r\n    $print: false;\r\n\r\n    @if ($type == 'bool') {\r\n      $print: true;\r\n    }\r\n    @else if ($type == 'string') {\r\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\r\n        $print: true;\r\n      }\r\n    }\r\n    @else if ($type == 'list') {\r\n      @each $wrapper in breakpoint-get('no query fallbacks') {\r\n        @if $query-fallback == $wrapper {\r\n          $print: true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Write Fallback\r\n    @if ($query-fallback != false) and ($print == true) {\r\n      $type-fallback: type-of($query-fallback);\r\n\r\n      @if ($type-fallback != 'bool') {\r\n        #{$query-fallback} & {\r\n          @content;\r\n        }\r\n      }\r\n      @else {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n\r\n  @include private-breakpoint-reset-contexts();\r\n}\r\n\r\n\r\n@mixin mq($query, $no-query: false) {\r\n  @include breakpoint($query, $no-query) {\r\n    @content;\r\n  }\r\n}\r\n","// Span Syntax\r\n// ===========\r\n\r\n// Span [mixin]\r\n// ------------\r\n// Set a spanning element using shorthand syntax.\r\n// - $span  : <span>\r\n@mixin span(\r\n  $span\r\n) {\r\n  $inspect: $span;\r\n  $span: parse-span($span);\r\n  $output: span-math($span);\r\n  $nesting: susy-get(span, $span);\r\n  $clear: susy-get(clear, $span);\r\n\r\n  $box: susy-get(box-sizing, $span);\r\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\r\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\r\n\r\n  @if $clear == break {\r\n    @include break;\r\n  } @else if $clear == nobreak {\r\n    @include nobreak;\r\n  }\r\n\r\n  @include susy-inspect(span, $inspect);\r\n  @include output((box-sizing: $box));\r\n  @include float-span-output($output...);\r\n\r\n  @if valid-columns($nesting, silent) {\r\n    @include nested($span) { @content; }\r\n  } @else {\r\n    @content;\r\n  }\r\n}\r\n\r\n// Span [function]\r\n// ---------------\r\n// Return the width of a span.\r\n// - $span  : <span>\r\n@function span(\r\n  $span\r\n) {\r\n  @return get-span-width($span);\r\n}\r\n\r\n// Span Math\r\n// ---------\r\n// Get all the span results.\r\n// - $span: <map>\r\n@function span-math(\r\n  $span\r\n) {\r\n  $nest             : if(susy-get(role, $span) == nest, true, false);\r\n  $split-nest       : if(is-split($span) and $nest, true, false);\r\n  $edge             : get-edge($span);\r\n  $location         : get-location($span);\r\n\r\n  $float            : from;\r\n  $padding-before   : null;\r\n  $padding-after    : null;\r\n  $margin-before    : null;\r\n  $margin-after     : null;\r\n\r\n  // calculate widths\r\n  $spread: index(map-values($span), spread);\r\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\r\n  $width: get-span-width($span);\r\n  $gutters: get-gutters($span);\r\n\r\n  // apply gutters\r\n  @if is-inside($span) {\r\n    @if not(susy-get(role, $span)) {\r\n      $padding-before: map-get($gutters, before);\r\n      $padding-after: map-get($gutters, after);\r\n    }\r\n  } @else {\r\n    @if not($split-nest) {\r\n      $margin-before: map-get($gutters, before);\r\n      $margin-after: map-get($gutters, after);\r\n    }\r\n  }\r\n\r\n  // special margin handling\r\n  @if susy-get(output, $span) == isolate and $location {\r\n    $margin-before: get-isolation($span);\r\n    $margin-after: -100%;\r\n  } @else if $edge {\r\n    $is-split: is-split($span);\r\n    $pos: susy-get(gutter-position, $span);\r\n\r\n    @if $edge == last {\r\n      $float: susy-get(last-flow, $span);\r\n    }\r\n\r\n    @if not($is-split) {\r\n      @if $edge == full or ($edge == first and $pos == before) {\r\n        $margin-before: 0;\r\n      }\r\n      @if $edge == full or ($edge == last and $pos == after) {\r\n        $margin-after: 0;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  @return (\r\n    width           : $width,\r\n    float           : $float,\r\n    margin-before   : $margin-before,\r\n    margin-after    : $margin-after,\r\n    padding-before  : $padding-before,\r\n    padding-after   : $padding-after,\r\n    flow            : susy-get(flow, $span),\r\n  );\r\n}\r\n\r\n// Get Span Width\r\n// --------------\r\n// Return span width.\r\n// - $span: <map>\r\n@function get-span-width(\r\n  $span\r\n) {\r\n  $span     : parse-span($span);\r\n\r\n  $n        : susy-get(span, $span);\r\n  $location : get-location($span);\r\n  $columns  : susy-get(columns, $span);\r\n  $gutters  : susy-get(gutters, $span);\r\n  $spread   : susy-get(spread, $span);\r\n\r\n  $context  : null;\r\n  $span-sum : null;\r\n  $width    : null;\r\n\r\n  @if $n == 'full' {\r\n    $pos: susy-get(gutter-position, $span);\r\n    $role: susy-get(role, $span);\r\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\r\n  }\r\n\r\n  @if type-of($n) != number {\r\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\r\n  } @else if unitless($n) {\r\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\r\n    $spread: if(is-inside($span), $spread or wide, $spread);\r\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\r\n\r\n    $_math: susy-get(math, $span);\r\n    $_column-width: susy-get(column-width, $span);\r\n    @if $_math == static {\r\n      $width: $span-sum * valid-column-math($_math, $_column-width);\r\n    } @else {\r\n      $width: percentage($span-sum / $context);\r\n    }\r\n  } @else {\r\n    $width: $n;\r\n  }\r\n\r\n  @return $width;\r\n}\r\n","// Direction Helpers\r\n// =================\r\n\r\n// Susy Flow Defaults\r\n// ------------------\r\n// - PRIVATE\r\n@include susy-defaults((\r\n  flow: ltr,\r\n));\r\n\r\n// Get Direction\r\n// -------------\r\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\r\n// - [$flow]  : ltr | rtl\r\n// - [$key]   : from | to\r\n@function get-direction(\r\n  $flow: map-get($susy-defaults, flow),\r\n  $key: from\r\n) {\r\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\r\n  @return map-get($return, $key);\r\n}\r\n\r\n// To\r\n// --\r\n// Return the 'to' direction of a flow\r\n// - [$flow]  : ltr | rtl\r\n@function to(\r\n  $flow: map-get($susy-defaults, flow)\r\n) {\r\n  @return get-direction($flow, to);\r\n}\r\n\r\n// From\r\n// ----\r\n// Return the 'from' direction of a flow\r\n// - [$flow]  : ltr | rtl\r\n@function from(\r\n  $flow: map-get($susy-defaults, flow)\r\n) {\r\n  @return get-direction($flow, from);\r\n}\r\n","// Gutter Syntax\r\n// =============\r\n\r\n\r\n// Gutters\r\n// -------\r\n// Set gutters on an element.\r\n// - [$span]   : <settings>\r\n@mixin gutters(\r\n  $span: $susy\r\n) {\r\n  $inspect  : $span;\r\n  $span     : parse-gutters($span);\r\n  $_gutters : get-gutters($span);\r\n\r\n  $_output: (\r\n    before: map-get($_gutters, before),\r\n    after: map-get($_gutters, after),\r\n    flow: susy-get(flow, $span),\r\n  );\r\n\r\n  @include susy-inspect(gutters, $inspect);\r\n\r\n  @if is-inside($span) {\r\n    @include padding-output($_output...);\r\n  } @else {\r\n    @include margin-output($_output...);\r\n  }\r\n}\r\n\r\n@mixin gutter(\r\n  $span: $susy\r\n) {\r\n  @include gutters($span);\r\n}\r\n\r\n\r\n// Gutter\r\n// ------\r\n// Return the width of a gutter.\r\n// - [$span]   : <settings>\r\n@function gutter(\r\n  $span: $susy\r\n) {\r\n  $span: parse-gutters($span);\r\n\r\n  $_gutters: get-gutters($span);\r\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\r\n\r\n  @return $_gutters;\r\n}\r\n\r\n@function gutters(\r\n  $span: $susy\r\n) {\r\n  @return gutter($span);\r\n}\r\n\r\n\r\n// Get Gutter Width\r\n// ----------------\r\n// Return gutter width.\r\n// - [$context]: <context>\r\n@function get-gutter-width(\r\n  $context: $susy\r\n) {\r\n  $context  : parse-gutters($context);\r\n\r\n  $_gutters : susy-get(gutters, $context);\r\n  $_gutter  : susy-get(gutter-override, $context);\r\n\r\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\r\n    $_column-width: susy-get(column-width, $context);\r\n    $_math: gutter-math($context);\r\n    @if $_math == static {\r\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\r\n    } @else {\r\n      $_columns : susy-get(columns, $context);\r\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\r\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\r\n    }\r\n  }\r\n\r\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\r\n\r\n  @return $_gutter;\r\n}\r\n\r\n\r\n// Get Gutters\r\n// -----------\r\n// Return before and after gutter values.\r\n// - [$context]: <context>\r\n@function get-gutters(\r\n  $context: $susy\r\n) {\r\n  $context            : parse-gutters($context);\r\n\r\n  $_gutter-position   : susy-get(gutter-position, $context);\r\n  $_gutter            : get-gutter-width($context);\r\n\r\n  $_return            : (before: null, after: null);\r\n\r\n  @if is-split($context) and $_gutter {\r\n    $_gutter: $_gutter / 2;\r\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\r\n  } @else {\r\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\r\n  }\r\n\r\n  @return $_return;\r\n}\r\n\r\n\r\n// Is Inside\r\n// ---------\r\n// Returns true if gutters are inside.\r\n// $context: <context>\r\n@function is-inside(\r\n  $context\r\n) {\r\n  $_inside: inside inside-static;\r\n  $_gutter-position: susy-get(gutter-position, $context);\r\n\r\n  @return if(index($_inside, $_gutter-position), true, false);\r\n}\r\n\r\n\r\n// Is Split\r\n// --------\r\n// Returns true if gutters are split.\r\n// $context: <context>\r\n@function is-split(\r\n  $context\r\n) {\r\n  $_split: split inside inside-static;\r\n  $_gutter-position: susy-get(gutter-position, $context);\r\n\r\n  @return if(index($_split, $_gutter-position), true, false);\r\n}\r\n\r\n\r\n// Gutter Math\r\n// -----------\r\n// Return the math to use for gutter calculations\r\n// $context: <context>\r\n@function gutter-math(\r\n  $context: $susy\r\n) {\r\n  $_return  : susy-get(math, $context);\r\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\r\n\r\n  @return $_return;\r\n}\r\n"]}