{"version":3,"sources":["main.css","base/_svg-sprite.scss","base/_tags.scss","utilites/_vars.sass","base/_typography.scss","../bower_components/bourbon/app/assets/stylesheets/functions/_px-to-rem.scss","layout/_grid.scss","../bower_components/susy/sass/susy/output/support/_rem.scss","../bower_components/susy/sass/susy/language/susy/_container.scss","../bower_components/susy/sass/susy/output/support/_clearfix.scss","modules/_buttons.scss","modules/_start.scss","base/_png-sprite.scss","../bower_components/susy/sass/susy/language/susy/_span.scss","../bower_components/susy/sass/susy/output/shared/_direction.scss","../bower_components/susy/sass/susy/language/susy/_gutters.scss","../bower_components/breakpoint-sass/stylesheets/_breakpoint.scss","modules/header/_header.scss","modules/footer/_footer.scss"],"names":[],"mappings":"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","file":"main.css","sourcesContent":["@charset \"UTF-8\";\n/* \r\n\t-------------------------------------------\r\n\tsvg спрайт\r\n\t-------------------------------------------\r\n*/\n.icon {\n  display: inline-block;\n  width: 1em;\n  height: 1em;\n  fill: currentColor; }\n\n.icon-brainstorm {\n  font-size: 29.6429rem;\n  width: 1em; }\n\n.icon-face {\n  font-size: 2.4rem;\n  width: 1.20833em; }\n\n.icon-gamepad {\n  font-size: 30rem;\n  width: 1em; }\n\n.icon-placeholder {\n  font-size: 29.9997rem;\n  width: 1em; }\n\n.icon-smartphone {\n  font-size: 3.5rem;\n  width: 1em; }\n\n.icon-youtube-4 {\n  font-size: 2.4rem;\n  width: 1em; }\n\n* {\n  box-sizing: border-box; }\n\nhtml,\nbody {\n  width: 100%;\n  height: 100%; }\n\nbody {\n  min-width: 320px;\n  position: relative;\n  font-family: \"OpenSansRegular\", sans-serif;\n  background-color: #fff;\n  color: #000;\n  -webkit-font-smoothing: antialiased;\n  -webkit-text-size-adjust: 100%; }\n\nimg {\n  max-width: 100%; }\n\nh1, h2, h3, h4, h5, h6 {\n  margin: 0; }\n\nbutton {\n  padding: 0;\n  outline: none; }\n\nol,\nul {\n  margin: 0;\n  padding: 0;\n  list-style: none; }\n\n.h1 {\n  font-size: 3rem; }\n\n/* \r\n\t-------------------------------------------\r\n\tGRID\r\n\t-------------------------------------------\r\n*/\n.page-wrap {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between; }\n\n.container {\n  position: relative;\n  max-width: 1170px;\n  margin-left: auto;\n  margin-right: auto; }\n  .container:after {\n    content: \" \";\n    display: block;\n    clear: both; }\n\n/* \r\n\t-------------------------------------------\r\n\tBUTTONS\r\n\t-------------------------------------------\r\n*/\n.page-title {\n  margin-bottom: 50px;\n  text-align: center; }\n\n.svg-sprites-section {\n  margin-bottom: 80px;\n  text-align: center; }\n\n/* Стили для SVG  иконок */\n.icon {\n  margin: 0 20px; }\n\n.icon-face {\n  font-size: 2rem;\n  width: 1.20833em; }\n  .icon-face.face-mod {\n    fill: grey; }\n\n.icon-smartphone {\n  font-size: 3rem;\n  width: 1em; }\n  .icon-smartphone.smartphone-mod {\n    fill: purple; }\n\n.icon-youtube-4 {\n  font-size: 3.625rem;\n  width: 1em; }\n  .icon-youtube-4.youtube4-mod {\n    fill: tomato;\n    transition: all 180ms ease-in-out; }\n    .icon-youtube-4.youtube4-mod:hover, .icon-youtube-4.youtube4-mod:active {\n      fill: red; }\n\n.icon-gamepad {\n  font-size: 7.5rem;\n  width: 1em; }\n  .icon-gamepad.gamepad-mod {\n    color: lightblue;\n    transition: all 180ms ease-in-out; }\n    .icon-gamepad.gamepad-mod:hover, .icon-gamepad.gamepad-mod:active {\n      color: grey; }\n\n.icon-placeholder {\n  font-size: 8.75rem;\n  width: 1em; }\n\n.icon-brainstorm {\n  font-size: 12.5rem;\n  width: 1em; }\n  .icon-brainstorm.brainstorm-mod {\n    color: red;\n    transition: all 180ms ease-in-out; }\n    .icon-brainstorm.brainstorm-mod:hover, .icon-brainstorm.brainstorm-mod:active {\n      color: purple; }\n\n/* Стили для PNG  иконок */\n.png-sprites-section {\n  margin-bottom: 80px;\n  text-align: center; }\n\n.icon-png {\n  display: inline-block;\n  margin: 0 10px;\n  vertical-align: middle; }\n  .icon-png__flashlight {\n    background-image: url(../img/png-sprite.png);\n    background-position: 0px -98px;\n    width: 64px;\n    height: 64px; }\n    .icon-png__flashlight:hover, .icon-png__flashlight:focus {\n      background-image: url(../img/png-sprite.png);\n      background-position: -98px 0px;\n      width: 64px;\n      height: 64px; }\n  .icon-png__instagram {\n    background-image: url(../img/png-sprite.png);\n    background-position: -164px 0px;\n    width: 48px;\n    height: 48px; }\n    .icon-png__instagram:hover, .icon-png__instagram:focus {\n      background-image: url(../img/png-sprite.png);\n      background-position: -66px -98px;\n      width: 48px;\n      height: 48px; }\n  .icon-png__weather {\n    background-image: url(../img/png-sprite.png);\n    background-position: -164px -50px;\n    width: 48px;\n    height: 48px; }\n  .icon-png__whatsapp {\n    background-image: url(../img/png-sprite.png);\n    background-position: 0px -164px;\n    width: 48px;\n    height: 48px; }\n    .icon-png__whatsapp:hover, .icon-png__whatsapp:focus {\n      background-image: url(../img/png-sprite.png);\n      background-position: -164px -100px;\n      width: 48px;\n      height: 48px; }\n\n.block-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  background-color: #3498db; }\n  .block-list li {\n    width: 23.61111%;\n    float: left;\n    margin-left: 0.69444%;\n    margin-right: 0.69444%;\n    background-color: #1abc9c;\n    margin-bottom: 20px; }\n  @media (min-width: 960px) and (max-width: 1279px) {\n    .block-list li {\n      width: 31.94444%;\n      float: left;\n      margin-left: 0.69444%;\n      margin-right: 0.69444%;\n      background-color: #f39c12; } }\n  @media (min-width: 600px) and (max-width: 959px) {\n    .block-list li {\n      width: 48.61111%;\n      float: left;\n      margin-left: 0.69444%;\n      margin-right: 0.69444%;\n      background-color: #e74c3c; } }\n  @media (max-width: 599px) {\n    .block-list li {\n      width: 98.61111%;\n      float: left;\n      margin-left: 0.69444%;\n      margin-right: 0.69444%;\n      background-color: #8e44ad; } }\n\n/* \r\n\t-----------------------------------------------\r\n\t\tHEADER\r\n\t-----------------------------------------------\r\n*/\n.header {\n  padding: 20px 0px;\n  background-color: #F44336; }\n\n/* \r\n\t-----------------------------------------------\r\n\t\tFOOTER\r\n\t-----------------------------------------------\r\n*/\n.footer {\n  padding: 20px 0;\n  background-color: #673AB7; }\n","/* \r\n\t-------------------------------------------\r\n\tsvg спрайт\r\n\t-------------------------------------------\r\n*/\r\n.icon {\r\n\tdisplay: inline-block;\r\n\twidth: 1em;\r\n\theight: 1em;\r\n\tfill: currentColor;\r\n}\r\n\r\n.icon-brainstorm {\r\n\tfont-size:(296.429/10)*1rem;\r\n\twidth:(296.429/296.429)*1em;\r\n}\r\n.icon-face {\r\n\tfont-size:(24/10)*1rem;\r\n\twidth:(29/24)*1em;\r\n}\r\n.icon-gamepad {\r\n\tfont-size:(300/10)*1rem;\r\n\twidth:(300/300)*1em;\r\n}\r\n.icon-placeholder {\r\n\tfont-size:(299.997/10)*1rem;\r\n\twidth:(299.997/299.997)*1em;\r\n}\r\n.icon-smartphone {\r\n\tfont-size:(35/10)*1rem;\r\n\twidth:(35/35)*1em;\r\n}\r\n.icon-youtube-4 {\r\n\tfont-size:(24/10)*1rem;\r\n\twidth:(24/24)*1em;\r\n}\r\n","\r\n* {\r\n  box-sizing: border-box\r\n}\r\n\r\n\r\nhtml,\r\nbody {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n\r\nbody {\r\n  min-width: 320px;\r\n  position: relative;\r\n  font-family: $main-font;\r\n  background-color: #fff;\r\n  color: #000;\r\n  -webkit-font-smoothing: antialiased;\r\n  -webkit-text-size-adjust: 100%;\r\n}\r\n\r\nimg {\r\n  max-width: 100%;\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n  margin: 0;\r\n}\r\n\r\nbutton {\r\n  padding: 0;\r\n  outline: none;\r\n}\r\n\r\nol,\r\nul {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n}\r\n","//\n//\n//\n\n\n$main-font: 'OpenSansRegular', sans-serif;\n$font-italic: 'firasans-italic', sans-serif;\n$font-extraBoldItalic: 'firasans-extrabolditalic', sans-serif;\n$font-helvetica: 'helveticaneuecyr-roman', sans-serif;\n",".h1 {\r\n\tfont-size: rem(48);\r\n}","// Convert pixels to rems\n// eg. for a relational value of 12px write rem(12)\n// Assumes $em-base is the font-size of <html>\n\n@function rem($pxval) {\n  @if $output-bourbon-deprecation-warnings == true {\n    @warn \"[Bourbon] [Deprecation] `rem` is deprecated and will be \" +\n    \"removed in 5.0.0.\";\n  }\n\n  $user-deprecation-warnings-setting: $output-bourbon-deprecation-warnings;\n  $output-bourbon-deprecation-warnings: false !global;\n\n  @if not unitless($pxval) {\n    $pxval: strip-units($pxval);\n  }\n\n  $base: $em-base;\n  @if not unitless($base) {\n    $base: strip-units($base);\n  }\n\n  $output-bourbon-deprecation-warnings: $user-deprecation-warnings-setting !global;\n\n  @return ($pxval / $base) * 1rem;\n}\n","/* \r\n\t-------------------------------------------\r\n\tGRID\r\n\t-------------------------------------------\r\n*/\r\n\r\n// Настройки Susy\r\n$susy: (\r\n  columns: 12,\r\n  gutters: 1/5,\r\n  math: fluid,\r\n  output: float,\r\n  gutter-position: split\r\n);\r\n\r\n\r\n\r\n// примеры Breakpoint\r\n$extraWide: 1920px;\r\n$wide: 1280px 1919px;\r\n$desktop: 960px 1279px;\r\n$tablet: 600px 959px;\r\n$mobile: max-width 599px;\r\n\r\n$landscape: (max-height 600px) (orientation portrait);\r\n$hidpi: min-resolution 1.5dppx;\r\n\r\n\r\n//-----------------------------------------------------------\r\n\r\n.page-wrap {\r\n\theight: 100%;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: space-between;\r\n}\r\n\r\n\r\n.container {\r\n\tposition: relative;\r\n\t@include container(1170px);\r\n}","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Container Syntax\n// ================\n\n// Container [mixin]\n// -----------------\n// Set a container element\n// - [$layout]  : <settings>\n@mixin container(\n  $layout: $susy\n) {\n  $inspect    : $layout;\n  $layout     : parse-grid($layout);\n\n  $_width     : get-container-width($layout);\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\n\n  $_box       : susy-get(box-sizing, $layout);\n\n  @if $_box {\n    @include output((box-sizing: $_box));\n  }\n\n  @include susy-inspect(container, $inspect);\n  @include float-container($_width, $_justify, $_property);\n  @include show-grid($layout);\n}\n\n// Container [function]\n// --------------------\n// Return container width\n// - [$layout]  : <settings>\n@function container(\n  $layout: $susy\n) {\n  $layout: parse-grid($layout);\n  @return get-container-width($layout);\n}\n\n// Get Container Width\n// -------------------\n// Calculate the container width\n// - [$layout]: <settings>\n@function get-container-width(\n  $layout: $susy\n) {\n  $layout         : parse-grid($layout);\n  $_width         : susy-get(container, $layout);\n  $_column-width  : susy-get(column-width, $layout);\n  $_math          : susy-get(math, $layout);\n\n  @if not($_width) or $_width == auto {\n    @if valid-column-math($_math, $_column-width) {\n      $_columns   : susy-get(columns, $layout);\n      $_gutters   : susy-get(gutters, $layout);\n      $_spread    : if(is-split($layout), wide, narrow);\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\n    } @else {\n      $_width: 100%;\n    }\n  }\n\n  @return $_width;\n}\n\n// Parse Container Position\n// ------------------------\n// Parse the $container-position into margin values.\n// - [$justify]   : left | center | right | <length> [<length>]\n@function parse-container-position(\n  $justify: map-get($susy-defaults, container-position)\n) {\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\n\n  @if not(index(left right center, $justify)) {\n    $_return: nth($justify, 1);\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\n  }\n\n  @return $_return;\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n","/* \r\n\t-------------------------------------------\r\n\tBUTTONS\r\n\t-------------------------------------------\r\n*/",".page-wrap {\r\n}\r\n\r\n\r\n.page-title {\r\n\tmargin-bottom: 50px;\r\n\ttext-align: center;\r\n}\r\n\r\n\r\n.svg-sprites-section{\r\n  margin-bottom: 80px;\r\n\ttext-align: center;\r\n}\r\n\r\n/* Стили для SVG  иконок */\r\n.icon {\r\n\tmargin: 0 20px;\r\n}\r\n\r\n.icon-face {\r\n  font-size: rem(32);\r\n  width: 1.20833em; \r\n\r\n  &.face-mod {\r\n  \tfill: grey;\r\n  }\r\n\r\n}\r\n\r\n.icon-smartphone {\r\n  font-size: rem(48);\r\n  width: 1em; \r\n\r\n  &.smartphone-mod {\r\n  \tfill: purple;\r\n  }\r\n\r\n}\r\n\r\n.icon-youtube-4 {\r\n  font-size: rem(58);\r\n  width: 1em;\r\n\r\n  &.youtube4-mod {\r\n  \tfill: tomato;\r\n  \ttransition: all 180ms ease-in-out;\r\n\r\n  \t&:hover,\r\n\t  &:active {\r\n\t  \tfill: red;\r\n\t  }\r\n  }\r\n\r\n}\r\n\r\n.icon-gamepad {\r\n  font-size: rem(120);\r\n  width: 1em; \r\n\r\n   &.gamepad-mod {\r\n  \tcolor: lightblue;\r\n  \ttransition: all 180ms ease-in-out;\r\n\r\n  \t&:hover,\r\n\t  &:active {\r\n\t \t\tcolor: grey;\r\n\t  }\r\n  }\r\n\r\n}\r\n\r\n\r\n.icon-placeholder {\r\n  font-size: rem(140);\r\n  width: 1em; \r\n}\r\n\r\n\r\n.icon-brainstorm {\r\n  font-size: rem(200);\r\n  width: 1em; \r\n\r\n\r\n\t&.brainstorm-mod {\r\n\t\tcolor: red;\r\n\t\ttransition: all 180ms ease-in-out;\r\n\r\n\t\t&:hover,\r\n\t  &:active {\r\n\t  \tcolor: purple;\r\n\t  }\r\n\t}\r\n}\r\n\r\n\r\n\r\n/* Стили для PNG  иконок */\r\n.png-sprites-section {\r\n  margin-bottom: 80px;\r\n  text-align: center;\r\n}\r\n\r\n\r\n.icon-png {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n  vertical-align: middle;\r\n\r\n  &__flashlight {\r\n    @include sprite($icon-flashlight);\r\n\r\n    &:hover,\r\n    &:focus {\r\n      @include sprite($icon-flashlight-mod);\r\n    }\r\n  }\r\n\r\n  &__instagram {\r\n    @include sprite($icon-instagram);\r\n\r\n    &:hover,\r\n    &:focus {\r\n      @include sprite($icon-instagram-mod);\r\n    }\r\n  }\r\n\r\n  &__weather {\r\n    @include sprite($icon-weather);\r\n  }\r\n\r\n  &__whatsapp {\r\n    @include sprite($icon-whatsapp);\r\n\r\n    &:hover,\r\n    &:focus {\r\n      @include sprite($icon-whatsapp-mod);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n.block-list {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n\r\n  background-color: #3498db;\r\n\r\n  li {\r\n    @include span(3);\r\n    background-color: #1abc9c;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  @include breakpoint($desktop) {\r\n    li {\r\n      @include span(4);\r\n      background-color: #f39c12;\r\n    }\r\n  }\r\n\r\n  @include breakpoint($tablet) {\r\n    li {\r\n      @include span(6);\r\n      background-color: #e74c3c;\r\n    }\r\n  }\r\n\r\n  @include breakpoint($mobile) {\r\n    li {\r\n      @include span(12);\r\n      background-color: #8e44ad;\r\n    }\r\n  }\r\n}","// SCSS variables are information about icon's compiled state, stored under its original file name\n//\n// .icon-home {\n//   width: $icon-home-width;\n// }\n//\n// The large array-like variables contain all information about a single icon\n// $icon-home: x y offset_x offset_y width height total_width total_height image_path;\n//\n// At the bottom of this section, we provide information about the spritesheet itself\n// $spritesheet: width height image $spritesheet-sprites;\n$icon-amazon-name: 'icon-amazon';\n$icon-amazon-x: 0px;\n$icon-amazon-y: 0px;\n$icon-amazon-offset-x: 0px;\n$icon-amazon-offset-y: 0px;\n$icon-amazon-width: 96px;\n$icon-amazon-height: 96px;\n$icon-amazon-total-width: 212px;\n$icon-amazon-total-height: 212px;\n$icon-amazon-image: '../img/png-sprite.png';\n$icon-amazon: (0px, 0px, 0px, 0px, 96px, 96px, 212px, 212px, '../img/png-sprite.png', 'icon-amazon', );\n$icon-flashlight-mod-name: 'icon-flashlight-mod';\n$icon-flashlight-mod-x: 98px;\n$icon-flashlight-mod-y: 0px;\n$icon-flashlight-mod-offset-x: -98px;\n$icon-flashlight-mod-offset-y: 0px;\n$icon-flashlight-mod-width: 64px;\n$icon-flashlight-mod-height: 64px;\n$icon-flashlight-mod-total-width: 212px;\n$icon-flashlight-mod-total-height: 212px;\n$icon-flashlight-mod-image: '../img/png-sprite.png';\n$icon-flashlight-mod: (98px, 0px, -98px, 0px, 64px, 64px, 212px, 212px, '../img/png-sprite.png', 'icon-flashlight-mod', );\n$icon-flashlight-name: 'icon-flashlight';\n$icon-flashlight-x: 0px;\n$icon-flashlight-y: 98px;\n$icon-flashlight-offset-x: 0px;\n$icon-flashlight-offset-y: -98px;\n$icon-flashlight-width: 64px;\n$icon-flashlight-height: 64px;\n$icon-flashlight-total-width: 212px;\n$icon-flashlight-total-height: 212px;\n$icon-flashlight-image: '../img/png-sprite.png';\n$icon-flashlight: (0px, 98px, 0px, -98px, 64px, 64px, 212px, 212px, '../img/png-sprite.png', 'icon-flashlight', );\n$icon-instagram-mod-name: 'icon-instagram-mod';\n$icon-instagram-mod-x: 66px;\n$icon-instagram-mod-y: 98px;\n$icon-instagram-mod-offset-x: -66px;\n$icon-instagram-mod-offset-y: -98px;\n$icon-instagram-mod-width: 48px;\n$icon-instagram-mod-height: 48px;\n$icon-instagram-mod-total-width: 212px;\n$icon-instagram-mod-total-height: 212px;\n$icon-instagram-mod-image: '../img/png-sprite.png';\n$icon-instagram-mod: (66px, 98px, -66px, -98px, 48px, 48px, 212px, 212px, '../img/png-sprite.png', 'icon-instagram-mod', );\n$icon-instagram-name: 'icon-instagram';\n$icon-instagram-x: 164px;\n$icon-instagram-y: 0px;\n$icon-instagram-offset-x: -164px;\n$icon-instagram-offset-y: 0px;\n$icon-instagram-width: 48px;\n$icon-instagram-height: 48px;\n$icon-instagram-total-width: 212px;\n$icon-instagram-total-height: 212px;\n$icon-instagram-image: '../img/png-sprite.png';\n$icon-instagram: (164px, 0px, -164px, 0px, 48px, 48px, 212px, 212px, '../img/png-sprite.png', 'icon-instagram', );\n$icon-weather-name: 'icon-weather';\n$icon-weather-x: 164px;\n$icon-weather-y: 50px;\n$icon-weather-offset-x: -164px;\n$icon-weather-offset-y: -50px;\n$icon-weather-width: 48px;\n$icon-weather-height: 48px;\n$icon-weather-total-width: 212px;\n$icon-weather-total-height: 212px;\n$icon-weather-image: '../img/png-sprite.png';\n$icon-weather: (164px, 50px, -164px, -50px, 48px, 48px, 212px, 212px, '../img/png-sprite.png', 'icon-weather', );\n$icon-whatsapp-mod-name: 'icon-whatsapp-mod';\n$icon-whatsapp-mod-x: 164px;\n$icon-whatsapp-mod-y: 100px;\n$icon-whatsapp-mod-offset-x: -164px;\n$icon-whatsapp-mod-offset-y: -100px;\n$icon-whatsapp-mod-width: 48px;\n$icon-whatsapp-mod-height: 48px;\n$icon-whatsapp-mod-total-width: 212px;\n$icon-whatsapp-mod-total-height: 212px;\n$icon-whatsapp-mod-image: '../img/png-sprite.png';\n$icon-whatsapp-mod: (164px, 100px, -164px, -100px, 48px, 48px, 212px, 212px, '../img/png-sprite.png', 'icon-whatsapp-mod', );\n$icon-whatsapp-name: 'icon-whatsapp';\n$icon-whatsapp-x: 0px;\n$icon-whatsapp-y: 164px;\n$icon-whatsapp-offset-x: 0px;\n$icon-whatsapp-offset-y: -164px;\n$icon-whatsapp-width: 48px;\n$icon-whatsapp-height: 48px;\n$icon-whatsapp-total-width: 212px;\n$icon-whatsapp-total-height: 212px;\n$icon-whatsapp-image: '../img/png-sprite.png';\n$icon-whatsapp: (0px, 164px, 0px, -164px, 48px, 48px, 212px, 212px, '../img/png-sprite.png', 'icon-whatsapp', );\n$spritesheet-width: 212px;\n$spritesheet-height: 212px;\n$spritesheet-image: '../img/png-sprite.png';\n$spritesheet-sprites: ($icon-amazon, $icon-flashlight-mod, $icon-flashlight, $icon-instagram-mod, $icon-instagram, $icon-weather, $icon-whatsapp-mod, $icon-whatsapp, );\n$spritesheet: (212px, 212px, '../img/png-sprite.png', $spritesheet-sprites, );\n\n// The provided mixins are intended to be used with the array-like variables\n//\n// .icon-home {\n//   @include sprite-width($icon-home);\n// }\n//\n// .icon-email {\n//   @include sprite($icon-email);\n// }\n//\n// Example usage in HTML:\n//\n// `display: block` sprite:\n// <div class=\"icon-home\"></div>\n//\n// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:\n//\n// // CSS\n// .icon {\n//   display: inline-block;\n// }\n//\n// // HTML\n// <i class=\"icon icon-home\"></i>\n@mixin sprite-width($sprite) {\n  width: nth($sprite, 5);\n}\n\n@mixin sprite-height($sprite) {\n  height: nth($sprite, 6);\n}\n\n@mixin sprite-position($sprite) {\n  $sprite-offset-x: nth($sprite, 3);\n  $sprite-offset-y: nth($sprite, 4);\n  background-position: $sprite-offset-x  $sprite-offset-y;\n}\n\n@mixin sprite-image($sprite) {\n  $sprite-image: nth($sprite, 9);\n  background-image: url(#{$sprite-image});\n}\n\n@mixin sprite($sprite) {\n  @include sprite-image($sprite);\n  @include sprite-position($sprite);\n  @include sprite-width($sprite);\n  @include sprite-height($sprite);\n}\n\n// The `sprites` mixin generates identical output to the CSS template\n//   but can be overridden inside of SCSS\n//\n// @include sprites($spritesheet-sprites);\n@mixin sprites($sprites) {\n  @each $sprite in $sprites {\n    $sprite-name: nth($sprite, 10);\n    .#{$sprite-name} {\n      @include sprite($sprite);\n    }\n  }\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n","// Gutter Syntax\n// =============\n\n\n// Gutters\n// -------\n// Set gutters on an element.\n// - [$span]   : <settings>\n@mixin gutters(\n  $span: $susy\n) {\n  $inspect  : $span;\n  $span     : parse-gutters($span);\n  $_gutters : get-gutters($span);\n\n  $_output: (\n    before: map-get($_gutters, before),\n    after: map-get($_gutters, after),\n    flow: susy-get(flow, $span),\n  );\n\n  @include susy-inspect(gutters, $inspect);\n\n  @if is-inside($span) {\n    @include padding-output($_output...);\n  } @else {\n    @include margin-output($_output...);\n  }\n}\n\n@mixin gutter(\n  $span: $susy\n) {\n  @include gutters($span);\n}\n\n\n// Gutter\n// ------\n// Return the width of a gutter.\n// - [$span]   : <settings>\n@function gutter(\n  $span: $susy\n) {\n  $span: parse-gutters($span);\n\n  $_gutters: get-gutters($span);\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\n\n  @return $_gutters;\n}\n\n@function gutters(\n  $span: $susy\n) {\n  @return gutter($span);\n}\n\n\n// Get Gutter Width\n// ----------------\n// Return gutter width.\n// - [$context]: <context>\n@function get-gutter-width(\n  $context: $susy\n) {\n  $context  : parse-gutters($context);\n\n  $_gutters : susy-get(gutters, $context);\n  $_gutter  : susy-get(gutter-override, $context);\n\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\n    $_column-width: susy-get(column-width, $context);\n    $_math: gutter-math($context);\n    @if $_math == static {\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\n    } @else {\n      $_columns : susy-get(columns, $context);\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\n    }\n  }\n\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\n\n  @return $_gutter;\n}\n\n\n// Get Gutters\n// -----------\n// Return before and after gutter values.\n// - [$context]: <context>\n@function get-gutters(\n  $context: $susy\n) {\n  $context            : parse-gutters($context);\n\n  $_gutter-position   : susy-get(gutter-position, $context);\n  $_gutter            : get-gutter-width($context);\n\n  $_return            : (before: null, after: null);\n\n  @if is-split($context) and $_gutter {\n    $_gutter: $_gutter / 2;\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\n  } @else {\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\n  }\n\n  @return $_return;\n}\n\n\n// Is Inside\n// ---------\n// Returns true if gutters are inside.\n// $context: <context>\n@function is-inside(\n  $context\n) {\n  $_inside: inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_inside, $_gutter-position), true, false);\n}\n\n\n// Is Split\n// --------\n// Returns true if gutters are split.\n// $context: <context>\n@function is-split(\n  $context\n) {\n  $_split: split inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_split, $_gutter-position), true, false);\n}\n\n\n// Gutter Math\n// -----------\n// Return the math to use for gutter calculations\n// $context: <context>\n@function gutter-math(\n  $context: $susy\n) {\n  $_return  : susy-get(math, $context);\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\n\n  @return $_return;\n}\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","/* \r\n\t-----------------------------------------------\r\n\t\tHEADER\r\n\t-----------------------------------------------\r\n*/\r\n\r\n.header {\r\n\tpadding: 20px 0px;\r\n\tbackground-color: #F44336;\r\n}","/* \r\n\t-----------------------------------------------\r\n\t\tFOOTER\r\n\t-----------------------------------------------\r\n*/\r\n\r\n.footer {\r\n\tpadding: 20px 0;\r\n\tbackground-color: #673AB7;\r\n}"]}